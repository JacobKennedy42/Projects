Due date: 10/31/2018 @ 11:59pm

Assignment:
~~~~~~~~~~~

- Implement a simple file system (BobFS)
- Contribute a test case
- Answer the questions in REPORT.txt

Test case rules:
~~~~~~~~~~~~~~~~

- Can't rely on the quality of the heap (max 100K allocated at any time)
- Needs to run in less than 10 seconds
- Should be named using your CSID

    <CSID>.cc
    <CSID>.ok
    <CSID>.img

Image files:
~~~~~~~~~~~~

Tests need image files emulating the contents of hard drives. Those
files can get large (8323K each) so we have to follow some rules

- only t0's image is committed / pushed
- <test name>.img files are created by the Makefile
- the Makefile will not delete those files automatically
- please don't add those files to git
- "git status" will show those files as untracked, keep it this way
- you can remove the image files with a command like "rm -f *.img"

BobFS
~~~~~

BobFS is an ext2-like file systems with major simplifications

 - Only one block group
 - Block size is always 1K
 - i-node has 16 bytes:

     * 16 bit i-node type (1 directory, 2 file)
     * 16 bit nlinks
     * 32 bit size
     * 1 pointer to direct block
     * 1 pointer to indirect block

- Super-block has:

     * 8 byte magic number "BOBFS439"
     * i-number for root directory

- A directory contains a list of entries. For each entry:

     * i-number for entry (32 bits)
     * name length  (32 bits)
     * name (not zero terminated)

   The entries in the directory are not sorted

- Overall layout:

   - super-block
   - data block bitmap (1 block)
   - inode bitmap (1 block)
   - inodes
   - data blocks


t0.img contains the data image used in t0. You can browse it using tools
like od. For example:

    od -Ax -X t0.img

The file system interface
~~~~~~~~~~~~~~~~~~~~~~~~~

class BobFS defines the file system interface. Look in kernel/bobfs.h
for details

Our implementation will be low-level with minimal error checking and no
buffering or caching will be required

Files:
~~~~~~

- t0.cc, t1.cc, ... (test cases to be left alone)
- t0.ok, t1.ok, ... (expected output to be left alone)
- Makefile, common.mak, kernel/Makefile (makefile to be left alone)

- you're free to add, remove, or modify other files

- t0.raw, t1.raw, ....     output from running tests
- t0.out, t1.out, ....     clean output from running tests
- t0.diff, t1.diff, ...    difference between k?.out and k?.ok
- t0.img ...               the disk image for that test

                            
To compile:
~~~~~~~~~~~

    make

To run test:
~~~~~~~~~~~~

    make -s clean test

To run one test:
~~~~~~~~~~~~~~~~

    make -s <test name>.result

To make the output more noisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    make clean test

To run by hand
~~~~~~~~~~~~~~

    cp k?.cc kernel/kernel.cc
    make clean
    qemu-system-i386 ...

To attach with gdb
~~~~~~~~~~~~~~~~~~

It's a good idea to change the -O3 to -O0 in common.mak if you want to debug
with gdb

    qemu-system-i386 -S -s ...

  then in another window

    > gdb kernel/kernel
    (gdb) target remote localhost:1234
    (gdb) # define breakpoint, etc
    (gdb) cont

cp t0.src t0.img
qemu-system-i386 -nographic -smp 4 --monitor none --serial stdio -drive file=kernel/kernel.img,index=0,media=disk,format=raw -drive file=t0.img,index=3,media=disk,format=raw -device isa-debug-exit,iobase=0xf4,iosize=0x04

qemu-system-i386 -nographic -smp 4 --monitor none --serial stdio -drive file=kernel/kernel.img,index=0,media=disk,format=raw -drive file=t1.img,index=3,media=disk,format=raw -device isa-debug-exit,iobase=0xf4,iosize=0x04

make  clean && make && qemu-system-i386 -nographic -smp 4 --monitor none --serial stdio -drive file=kernel/kernel.img,index=0,media=disk,format=raw -drive file=mytests.img,index=3,media=disk,format=raw -device isa-debug-exit,iobase=0xf4,iosize=0x04 -s -S
